;;;; Copyright 2012 Daniel Brooks <db48x@db48x.net>
;;;; Licensed GPL3; feel free to fork.

;;; first initialize the memory map
;;;   0x0000 - 0x01FF is used by functions atm
;;;   0x8000 - 0x81FF is the console
;;;   0x9000 - 0x900F is the keyboard buffer
;;;   0xF000 - 0xF780 is the memory map
;;;   0xF780 - 0xF87F for environment frames (1 word each)
;;;   0xF880 - 0xFA7F for bindings (2 words each)
;;;   0xFA80 - 0xFFFF left over for the stack
:init            set i, 0xF010
:init_loop       sub i, 1
                 ife i, 0xEFFF
                 set pc, init2
                 set [i], 0xFFFF
                 set pc, init_loop
:init2           set i, 0xF420
:init2_loop      sub i, 1
                 ife i, 0xF3FF
                 set pc, init_final
                 set [i], 0xFFFF
                 set pc, init2_loop
:init_final      set [0xF480], 0xF

set [0xF780], 0x1
set [0xF880], 0xFFFF
set [0xF881], 0xFFFF
set a, 0
jsr atm2tag
set [0xF882], a
set a, 11
jsr atm2tag
set b, a
set a, 42
jsr num2tag
set c, a
set a, 0xF780
jsr env_append_var
set pc, halt

;;; now execute a simple lisp program:
;;;  (print (car (cdr (cons (cons 42 (atom 24))))))
set a, 24
jsr atm2tag
set b, a
set a, 42
jsr num2tag
jsr cons
jsr ptr2tag
set b, a
set a, 33
jsr num2tag
jsr cons
set [root], a
jsr cdr
jsr tag2ptr
jsr car
jsr tag2num
set b, 0x8000
jsr itoa
jsr halt

;;; we'll need a GC someday
:root            dat 0x0200

;;; cons/car/cdr
:cons            set push, i
                 set push, j
                 set push, x
                 set push, y
                 set push, z
                 set i, 0xF000
:cons_loop       set j, [i]
                 ife j, 0xFFFF
                 set pc, cons_loop_end
                 set z, 0
:cons_loop_inner set x, j
                 set y, 1
                 shl y, z
                 ifb x, y
                 set pc, cons_inner_test
                 set pc, cons_found
:cons_inner_test add z, 1
                 ife z, 0x10
                 set pc, cons_loop_end
                 set pc, cons_loop_inner
:cons_loop_end   add i, 1
                 ife i, 0xFF80
                 set pc, cons_oom
                 set pc, cons_loop
:cons_found      set y, 1
                 shl y, z
                 bor y, j
                 set [i], y
                 sub i, 0xF000
                 mul i, 0x20
                 mul z, 2
                 add i, z
                 set [i], a
                 set a, i
                 add i, 1
                 set [i], b
                 set pc, cons_final
:cons_oom        set pc, halt
:cons_final      set pop, z
                 set y, pop
                 set x, pop
                 set j, pop
                 set i, pop
                 set pc, pop
:car             set a, [a]
                 set pc, pop
:cdr             add a, 1
                 set a, [a]
                 set pc, pop

;;; numbers
:num2tag         shl a, 2
                 set pc, pop
:tag2num         set push, b
                 set b, 3
                 ifb b, a
                 set pc, halt
                 shr a, 2
                 set b, pop
                 set pc, pop

;;; pointers
:ptr2tag         shl a, 2
                 add a, 1
                 set pc, pop
:tag2ptr         set push, b
                 set b, 3
                 and b, a
                 ife b, 1
                 set pc, tag2ptr_finish
                 set pc, halt
:tag2ptr_finish  shr a, 2
                 set b, pop
                 set pc, pop

;;; atoms
:atm2tag         ifg a, 0xFF
                 set pc, halt
                 shl a, 2
                 add a, 2
                 set pc, pop
:tag2atm         set push, b
                 set b, 3
                 and b, a
                 ife b, 2
                 set pc, tag2atm_finish
                 set pc, halt
:tag2atm_finish  ifg a, 0xFF
                 set pc, halt
                 shr a, 2
                 set b, pop
                 set pc, pop

;;; environments
:make_env        add a, 0xF77F
                 set pc, pop
:env_parent      set a, [a]
                 shr a, 8
                 add a, 0xF77F
                 set pc, pop
:env_vars        set a, [a]
                 and a, 0xFF
                 shl a, 1
                 add a, 0xF880
                 set pc, pop
:env_append_var  set push, a
                 set push, x
                 set push, y
                 set push, z
                 set push, i
                 set push, j
                 set x, a
                 jsr env_vars
                 set y, a
                 jsr env_alloc_var
                 set z, a
                 sub a, 0xF87E
                 shl a, 1
                 set i, a
                 set a, y
                 jsr env_var_atom
                 and a, i
                 set [y], a
                 set a, [x]
                 and a, 0xFF00
                 and a, z
                 set [x], a
                 set a, b
                 jsr tag2atm
                 set [z], a
                 set [1+z], c
                 set j, pop
                 set i, pop
                 set z, pop
                 set y, pop
                 set x, pop
                 set a, pop
                 set pc, pop
:env_alloc_var   set a, 0xF87E
:env_alloc_var_l add a, 2
                 ife [a], 0
                 set pc, env_alloc_var_1
                 set pc, env_alloc_var_l
:env_alloc_var_1 ife [1+a], 0
                 set pc, env_alloc_var_f
                 set pc, env_alloc_var_l
:env_alloc_var_f set pc, pop
:env_find_var    set a, a
:env_var_next    set a, [a]
                 shr a, 9
                 add a, 0xF87E
                 set pc, pop
:env_var_atom    set a, [a]
                 and a, 0xFF
                 set pc, pop
:env_var_value   add a, 1
                 set a, [a]
                 set pc, pop

;;; iota
;;; this creates a null-terminated string with one character per word
;;; we should instead use pascal-style strings with two characters per word
;;; displaying them won't be any slower, and manipulating lisp source will be faster 
:itoa            set push, i
                 set push, j
                 set push, a
                 set push, b
                 set push, c
                 set push, x
                 set push, y
                 set push, z
                 SET J, 0
:itoa_loop1      IFE A, 0
                 SET PC, itoa_l2
                 SET I, A
                 MOD I, 0xa
                 DIV A, 0xa
                 SET PUSH, i
                 ADD J, 1
                 SET PC, itoa_loop1
:itoa_l2         SET Z, 0
:itoa_loop2      IFE J, 0
                 SET PC, itoa_loop2end
                 SET I, POP
                 SET A, 0x30 ; '0'
                 ADD A, I
                 SET C, B
                 ADD C, Z
                 SET [C], A
                 ADD Z, 1
                 SUB J, 1
                 SET PC, itoa_loop2
:itoa_loop2end   SET C, B
                 ADD C, Z
                 SET [C], 0x0 ; null terminate
:itoa_itoaret    SET A, Z
                 set z, pop
                 set y, pop
                 set x, pop
                 set c, pop
                 set b, pop
                 set a, pop
                 set j, pop
                 set i, pop
                 SET PC, POP

;;;; halt
:halt            dat 0xFFF0
